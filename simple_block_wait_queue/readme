/*
# 191222 : 此範例執行步驟，已經可以執行。已補充程式裡的註解，以及詳細測試wait queue順序
1) $make
2) ls : 確認編好的檔案
3) 載入module 「mydemo_misc」 : sudo insmod mydemo_misc.ko           ## 注意 : 是輸入檔>    案名稱(xxx.ko)
4) 查詢module 「mydemo_misc」 : sudo lsmod | grep "mydemo_misc"
sudo rmmod mydemo_misc
5) 查詢有無成功 : dmesg 指令來察看系統日誌
[ 6972.532940] [walter]simple_char_init : succeeded register char device: my_demo_dev
[ 6988.453500] [walter]simple_char_exit : removing device

6) 載入module 「mydemo_misc」 : sudo insmod mydemo_misc.ko
7) 自動生成device node : ll /dev/ | grep my_demo
crw-------   1 root    root     10,  53 十二 22 21:14 my_demo_dev

8) 實驗一 : sudo su; cat /dev/my_demo_dev &; dmesg
[   64.455908] [walter]simple_char_init : succeeded register char device: my_demo_dev
[  109.190627] [walter]demodrv_open: major=10, minor=53
[  109.190658] [walter]demodrv_read: pid=2084, going to sleep
[  109.190659] [walter]demodrv_read: +++ kfifo_is_empty(&mydemo_fifo)=1

9) 實驗一 : echo "walter is studying linux now" > /dev/my_demo_dev
[   56.328829] [walter]simple_char_init : succeeded register char device: my_demo_dev
[  109.190627] [walter]demodrv_open: major=10, minor=53
[  109.190658] [walter]demodrv_read: pid=2084, going to sleep
[  109.190659] [walter]demodrv_read: +++ kfifo_is_empty(&mydemo_fifo)=1
[  139.808993] [walter]demodrv_open: major=10, minor=53
[  139.809045] [walter]demodrv_write: +++ kfifo_is_empty(&mydemo_fifo)=0
[  139.809049] [walter]demodrv_write: --- kfifo_is_empty(&mydemo_fifo)=0
[  139.809050] [walter]demodrv_write: pid=2072, actual_write =29, ppos=0, ret=0
[  139.809054] [walter]demodrv_read: --- kfifo_is_empty(&mydemo_fifo)=0
[  139.809061] [walter]demodrv_read: +++ kfifo_is_full(&mydemo_fifo)=0
[  139.809062] [walter]demodrv_read: --- kfifo_is_full(&mydemo_fifo)=0
[  139.809063] [walter]demodrv_read, pid=2084, actual_readed=29, pos=0
[  139.809072] [walter]demodrv_read: pid=2084, going to sleep
[  139.809073] [walter]demodrv_read: +++ kfifo_is_empty(&mydemo_fifo)=1
[  139.809079] [walter]demodrv_release


8.1) 實驗二 : dmesg    # 191224 note : sudo su; cat /dev/my_demo_dev &; 這行不要執行
[   93.327678] [walter]simple_char_init : succeeded register char device: my_demo_dev

9.1) 實驗二 : cc@simple_block_wait_queue$sudo su
root@cc-VirtualBox:/home/cc/githome/Linux_Device_Driver/simple_block_wait_queue# ./test
[walter]read -1 bytes
[walter]read buffer=
[walter]have write 64 bytes
[walter]have write -1 bytes
[walter]read 64 bytes
[walter]read buffer=walter testing the virtual FIFO device


cc@simple_block_wait_queue$dmesg
[   93.327678] [walter]simple_char_init : succeeded register char device: my_demo_dev
[  113.847726] [walter]demodrv_open: major=10, minor=53
[  113.847756] [walter]demodrv_write: +++ kfifo_is_empty(&mydemo_fifo)=0
[  113.847757] [walter]demodrv_write: --- kfifo_is_empty(&mydemo_fifo)=0
[  113.847758] [walter]demodrv_write: pid=2060, actual_write =64, ppos=0, ret=0
[  113.847763] [walter]demodrv_read: +++ kfifo_is_full(&mydemo_fifo)=0
[  113.847764] [walter]demodrv_read: --- kfifo_is_full(&mydemo_fifo)=0
[  113.847765] [walter]demodrv_read, pid=2060, actual_readed=64, pos=0
[  113.847771] [walter]demodrv_release


10) 手動移除 device node : rm /dev/my_demo_dev
11) 移除 module 「sudo 」 : rmmod my_demo_dev               ## 注意 : 是輸入模>    組名稱(xxx)

===============================
# Linux kernel會把一些不符合預先確定的character device劃分為misc device，這類的主設備號為10。

# misc_register : 自動創建device node，不需要使用mknod，這樣創建character device較方便。

# 參考文件 :
  張天飛，笨叔叔，奔跑吧內核
  runninglinuxkernel_4.0/rlk_lab/rlk_basic/chapter_5
  chapter-5-lab6-实验说明
*/
